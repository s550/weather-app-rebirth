{"version":3,"sources":["components/days.js","components/forecast.js","components/moment.js","App.js","serviceWorker.js","index.js"],"names":["Days","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","currently","weekly","forcast","dTemp","wTemp","weatherReport","lat","lon","_this2","navigator","geolocation","getCurrentPosition","position","axios","get","coords","latitude","longitude","then","response","console","log","setState","temperature","daily","summary","catch","err","ans","Math","round","moment","time","fromNow","outlook","map","day","react_default","a","createElement","key","className","unix","format","concat","icon","temperatureHigh","temperatureLow","Link","to","Component","Forecast","trueTemp","Date","toLocaleDateString","timezone","humidity","dewPoint","SwitchBoard","BrowserRouter","basename","process","Switch","Route","exact","path","component","App","components_moment","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf57c9eb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nclass Days extends Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state ={\r\n        data: [],\r\n        currently: [],\r\n        weekly: [],\r\n        forcast: null,\r\n        dTemp: [],\r\n        wTemp: []\r\n      }\r\n  \r\n    }\r\n    componentDidMount(){\r\n      this.weatherReport();\r\n    }\r\n    weatherReport(lat,lon){\r\n     if(navigator.geolocation){\r\n       navigator.geolocation.getCurrentPosition((position) => {\r\n        axios.get('https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/3b84024871aef976d646f09db58974da/' + position.coords.latitude + ',' + position.coords.longitude)\r\n        .then((response) =>{\r\n          console.log(response)\r\n          this.setState({dTemp: response.data.currently.temperature, data:response.data, currently:response.data.currently,weekly:response.data.daily.data,forcast:response.data.daily.summary}, function(){\r\n            console.log(this.state);\r\n          });\r\n        })\r\n        .catch((err) =>{\r\n          console.log(err);\r\n        });\r\n       })\r\n  \r\n     }\r\n  \r\n    }\r\n  \r\n    showTemp(ans){\r\n      this.setState({dTemp: ans}, this.weatherReport);\r\n    }\r\n    render(){ \r\n          const trueTemp = Math.round(this.state.currently.temperature);\r\n          let days = moment(this.state.weekly.time).fromNow();\r\n          const outlook = this.state.weekly.map(day => (\r\n              \r\n                <div key={day.time} className=\"top\">\r\n                <div className=\"card card-weekly\">\r\n                <header className=\"card-header\">\r\n                <h1 className=\"day card-header-title\">{moment.unix(day.time).format('ddd')}</h1>\r\n                </header>\r\n                <div className=\"card-content\">\r\n                  <div className=\"content\">\r\n                  <i className={`mini-top wi wi-forecast-io-${day.icon}`}></i>\r\n                  </div>\r\n                  <div className=\"content\">\r\n                  <p className=\"sum\">{day.summary}</p> \r\n                  </div>\r\n                </div>\r\n                <footer className=\"card-footer\">\r\n                   <p className=\"desc card-footer-item\">High: {Math.round(day.temperatureHigh)}&#xb0;</p>\r\n                   <p className=\"desc card-footer-item\">Low: {Math.round(day.temperatureLow)}&#xb0;</p>\r\n                </footer>\r\n                    {/* <h1 className=\"day\">{moment.unix(day.time).format('ddd')}</h1>\r\n                    <i className={`mini-top wi wi-forecast-io-${day.icon}`}></i>\r\n                       <p className=\"sum\">{day.summary}</p> \r\n                   \r\n                        <p className=\"desc\">High: {Math.round(day.temperatureHigh)}&#xb0;</p>\r\n                        <p className=\"desc\">Low: {Math.round(day.temperatureLow)}&#xb0;</p> */}\r\n                        \r\n                    </div>\r\n                 </div>\r\n                \r\n          ));\r\n          return(\r\n              <div className=\"container\">\r\n              <h1 className=\"return\"><Link className=\"return\" to=\"/\">Return to Daily View</Link></h1>\r\n              <div className=\"parent\">\r\n                {outlook}\r\n                \r\n              </div>\r\n              \r\n              \r\n              </div>\r\n          );\r\n      }\r\n    }\r\n  \r\n  \r\n  \r\n\r\nexport default Days;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// to make props work you must set the name of the state to the current state\r\n// check below in current weather for an example.\r\n\r\nconst Key = \"3b84024871aef976d646f09db58974da\";\r\nclass Forecast extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      currently: [],\r\n      weekly: [],\r\n      forcast: null,\r\n      dTemp: [],\r\n      wTemp: []\r\n    }\r\n\r\n  }\r\n  componentDidMount() {\r\n    this.weatherReport();\r\n  }\r\n  weatherReport(lat, lon) {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        axios.get('https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/3b84024871aef976d646f09db58974da/' + position.coords.latitude + ',' + position.coords.longitude)\r\n          .then((response) => {\r\n            console.log(response)\r\n            this.setState({ dTemp: response.data.currently.temperature, data: response.data, currently: response.data.currently, weekly: response.data.daily.data, forcast: response.data.daily.summary }, function () {\r\n              console.log(this.state);\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n      })\r\n\r\n    }\r\n\r\n  }\r\n\r\n  showTemp(ans) {\r\n    this.setState({ dTemp: ans }, this.weatherReport);\r\n  }\r\n  render() {\r\n    const trueTemp = Math.round(this.state.currently.temperature);\r\n    const date = new Date().toLocaleDateString();\r\n    return (\r\n      <div className=\"columns\">\r\n        {/* <div className=\"parent\"> */}\r\n\r\n        <div className=\"column main-top\">\r\n          <div className=\"card card-logic\">\r\n            <header className=\"card-header\">\r\n              <h1 className=\"card-header-title\">Right Now: </h1>\r\n            </header>\r\n            <div className=\"card-content\">\r\n              <div className=\"content\">\r\n                <i className={`center-main wi wi-forecast-io-${this.state.currently.icon}`}></i>\r\n                <h1 className=\"daily\">{trueTemp}&#xb0;</h1>\r\n              </div>\r\n              <div className=\"content\">\r\n                <h3 className=\"\">{this.state.data.timezone}</h3>\r\n                <h4><span className=\"\">Current Conditions: </span>{this.state.currently.summary}</h4>\r\n                <h4><span>Humidity: </span>{Math.round(this.state.currently.humidity * 100)}%</h4>\r\n                <h4><span>Dew Point: </span>{Math.round(this.state.currently.dewPoint)}&#xb0;</h4>\r\n\r\n              </div>\r\n            </div>\r\n            {/* <h1>Right Now: </h1>\r\n            <div className=\"daily-top\"><i className={`center-main wi wi-forecast-io-${ this.state.currently.icon}`}></i>\r\n            <h1 className=\"daily\">{trueTemp}&#xb0;</h1>\r\n            </div>\r\n  \r\n                <h3 className=\"card-title\">{this.state.data.timezone}</h3>\r\n                <h4><span className=\"desc\">Current Conditions: </span>{this.state.currently.summary}</h4>\r\n                <h4><span>Humidity: </span>{this.state.currently.humidity * 100}%</h4>\r\n                <h4><span>Dew Point: </span>{Math.round(this.state.currently.dewPoint)}&#xb0;</h4>\r\n                <h4 className=\"adj\"><Link className=\"bttn\" to=\"/days\">Weekly Forcast</Link></h4> */}\r\n            <footer className=\"card-footer\">\r\n              <h4 className=\"adj card-footer-item\"><Link className=\"bttn\" to=\"/days\">Weekly Forcast</Link></h4>\r\n            </footer>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        {/* </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Forecast;\r\n","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport Days from './days';\r\nimport Forecast from './forecast';\r\n// switch board containing routes for home and the weekly forcast.\r\n\r\nconst SwitchBoard = () => (\r\n    <main>\r\n        <BrowserRouter basename={process.env.PUBLIC_URL} >\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Forecast} />\r\n                <Route path=\"/days\" component={Days} />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    </main >\r\n)\r\n\r\n\r\nexport default SwitchBoard;","import React, { Component } from 'react';\r\nimport 'bulma/css/bulma.css';\r\nimport SwitchBoard from './components/moment';\r\n// renders the switchboard \r\n\r\n// const Key = \"3b84024871aef976d646f09db58974da\";\r\nclass App extends Component {\r\n  \r\n  render(){\r\n    return(  \r\n     <div className=\"container\">\r\n       <SwitchBoard/>\r\n      \r\n     </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render((\r\n\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>\r\n    \r\n    ), document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}